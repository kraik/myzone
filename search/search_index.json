{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"aws/cli/","title":"CLI","text":""},{"location":"aws/cli/#how-to-install-cli","title":"How to Install CLI","text":"<ul> <li> <p>How to Install and Configure AWS CLI on MacOS \u2013 Part 1</p> </li> <li> <p>How to Install and Configure AWS CLI on MacOS \u2013 Part 2</p> </li> </ul>"},{"location":"aws/ecs/","title":"Useful Links","text":"<ul> <li>AWS ECS Tutorial | Deploy a New Application from Scratch</li> </ul>"},{"location":"aws/learning/","title":"AWS Learning","text":""},{"location":"aws/tools/","title":"Useful Tools","text":"<p>AWS Vault is a tool to securely store and access AWS credentials in a development environment. </p> <ul> <li>Homebrew Formulae</li> <li>GitHub Repo</li> </ul> <pre><code>brew install --cask aws-vault\n</code></pre>"},{"location":"home/","title":"Welcome to CloudOps at 24i","text":"<p>A place for capturing useful information related to many areas of of our work that will assist our learning as well as helping other colleagues. If you come accross any useful links, commands or tutorials please feel free to add and contribute. </p> <p>For full documentation visit mkdocs.org.</p>"},{"location":"iterm2/cheatsheet/","title":"Cheatsheet","text":""},{"location":"iterm2/cheatsheet/#tabs-and-windows","title":"Tabs and Windows","text":"Function Shortcut New Tab <code>\u2318</code> + <code>T</code> Close Tab or Window <code>\u2318</code> + <code>W</code>  (same as many mac apps) Go to Tab <code>\u2318</code> + <code>Number Key</code>  (ie: <code>\u23182</code> is 2nd tab) Go to Split Pane by Direction <code>\u2318</code> + <code>Option</code> + <code>Arrow Key</code> Cycle iTerm Windows <code>\u2318</code> + <code>backtick</code>  (true of all mac apps and works with desktops/mission control) Splitting Split Window Vertically (same profile) <code>\u2318</code> + <code>D</code> Split Window Horizontally (same profile) <code>\u2318</code> + <code>Shift</code> + <code>D</code>  (mnemonic: shift is a wide horizontal key) Moving Move a pane with the mouse <code>\u2318</code> + <code>Alt</code> + <code>Shift</code> and then drag the pane from anywhere Fullscreen Fullscreen <code>\u2318</code>+ <code>Enter</code> Maximize a pane <code>\u2318</code> + <code>Shift</code> + <code>Enter</code>  (use with fullscreen to temp fullscreen a pane!) Resize Pane <code>Ctrl</code> + <code>\u2318</code> + <code>Arrow</code> (given you haven't mapped this to something else) Less Often Used By Me Go to Split Pane by Order of Use <code>\u2318</code> + <code>]</code> , <code>\u2318</code> + <code>[</code> Split Window Horizontally (new profile) <code>Option</code> + <code>\u2318</code> + <code>H</code> Split Window Vertically (new profile) <code>Option</code> + <code>\u2318</code> + <code>V</code> Previous Tab <code>\u2318</code>+ <code>Left Arrow</code>  (I usually move by tab number) Next Tab <code>\u2318</code>+ <code>Right Arrow</code> Go to Window <code>\u2318</code> + <code>Option</code> + <code>Number</code>"},{"location":"iterm2/cheatsheet/#my-favorite-shell-key-combos","title":"My Favorite Shell Key Combos","text":"<p>These might be helpful to getting you faster with the shell. These are just common shell shortcuts unrelated to iTerm itelf. These will usually work in Bash/Zsh/Fish on Mac and on Linux. There are many shortcuts out there but I use these quite a bit. There is also more than one way to do a thing so adopt what you like best.</p> <p>Hopefully some of these improve your work life.  :)</p> Function Key Combination Use Delete to start of line <code>Ctrl</code> + <code>U</code> Use this to start over typing without hitting Ctrl-C Delete to end of line <code>Ctrl</code> + <code>K</code> Use this with command history to repeat commands and changing one thing at the end! Repeat last command <code>Up Arrow</code> Cycle and browse your history with up and down.  <code>Ctrl-R</code> is faster if you know the string you are looking for. Move back and forth on a line <code>Arrow Keys</code> This takes you off the home row but it's easy to remember Move back and forth on a line by words <code>\u2325</code> + <code>Arrow Keys</code> Fast way to jump by words to correct a typo or \"run again\" with minor changes to last command.  Ctrl as modifier might also work on mac and non-mac keyboards/shells/apps. Delete previous word (in shell) <code>Ctrl</code> + <code>W</code> It's faster to delete by words.  Especially when your last command was wrong by a single typo or something. Clear screen <code>Ctrl</code> + <code>L</code> This is telling the shell to do it instead of an explicit command like <code>clear</code> or <code>cls</code> in DOS.  If you use <code>\u2318</code> + <code>K</code>, this is telling iTerm to clear the screen which might have the same result or do something terrible (like when using a TUI like <code>top</code> or <code>htop</code>.  In general, use this instead of typing <code>clear</code> over and over. Exit Shell <code>Ctrl</code> + <code>D</code> Instead of typing exit, just get this in muscle memory.  It works in many contexts."},{"location":"iterm2/cheatsheet/#moving-faster","title":"Moving Faster","text":"<p>A lot of shell shortcuts work in iterm and it's good to learn these because arrow keys, home/end keys and Mac equivalents don't always work.  For example <code>\u2318</code> + <code>Left Arrow</code> is usually the same as <code>Home</code> (go to beginning of current line) but that doesn't work in the shell.  Home works in many apps but it takes you away from the home row.</p> Function Shortcut Move to the start of line <code>Ctrl</code> + <code>A</code> or <code>Home</code> Move to the end of line <code>Ctrl</code> + <code>E</code> or <code>End</code> Move forward a word <code>Option</code> + <code>F</code> Move backward a word <code>Option</code> + <code>B</code> Set Mark <code>\u2318</code> + <code>M</code> Jump to Mark <code>\u2318</code> + <code>J</code> Moving by word on a line (this is a shell thing but passes through fine) <code>Ctrl</code> + <code>Left/Right Arrow</code> Cursor Jump with Mouse (shell and vim - might depend on config) <code>Option</code> + <code>Left Click</code>"},{"location":"iterm2/cheatsheet/#copy-and-paste-with-iterm-without-using-the-mouse","title":"Copy and Paste with iTerm without using the mouse","text":"<p>I don't use this feature too much.  I instead just mouse select (which copies to the clipboard) and paste.  There's no need to Copy to the clipboard if you have <code>General &gt; Selection &gt; Copy to pasteboard on selection</code> enabled.</p> Function Shortcut Enter Copy Mode <code>Shift</code> + <code>\u2318</code> + <code>C</code> Enter Character Selection Mode in Copy Mode <code>Ctrl</code> + <code>V</code> Move cursor in Copy Mode <code>HJKL</code> vim motions or arrow keys Copy text in Copy Mode <code>Ctrl</code> + <code>K</code> <p>Copy actions goes into the normal system clipboard which you can paste like normal.</p>"},{"location":"iterm2/cheatsheet/#search-the-command-history","title":"Search the Command History","text":"<p>Some of these are not directly related to iTerm and are just \"shell features\".  Like, if you open Terminal.app on Mac some of these still work because it's the shell and not iTerm.  I'm including them anyway.</p> Function Shortcut Search as you type <code>Ctrl</code> + <code>R</code> and type the search term; Repeat <code>Ctrl</code> + <code>R</code> to loop through result Search the last remembered search term <code>Ctrl</code> + <code>R</code> twice End the search at current history entry <code>Ctrl</code> + <code>Y</code> Cancel the search and restore original line <code>Ctrl</code> + <code>G</code>"},{"location":"iterm2/cheatsheet/#misc","title":"Misc","text":"Function Shortcut Clear the screen/pane (when <code>Ctrl + L</code> won't work) <code>\u2318</code> + <code>K</code>  (I use this all the time) Broadcast command to all panes in window (nice when needed!) <code>\u2318</code> + <code>Alt</code> +  <code>I</code> (again to toggle) Find Cursor <code>\u2318</code> + <code>/</code> or use a theme or cursor shape that is easy to see <p>GitHub Source</p> <p>Download iTerm2</p>"},{"location":"kubernetes/commands/","title":"Commands","text":""},{"location":"kubernetes/commands/#force-removes-all-pods","title":"Force Removes all pods","text":"<ul> <li><code>kubectl get pods | grep ContainerStatusUnknown | awk '{print $1}' | xargs kubectl delete pod</code></li> </ul>"},{"location":"kubernetes/commands/#force-removes-all-pods_1","title":"Force Removes all pods","text":"<ul> <li><code>kubectl get pods | grep Error | awk '{print $1}' | xargs kubectl delete pod</code></li> </ul>"},{"location":"kubernetes/commands/#_1","title":"Commands","text":""},{"location":"kubernetes/references/","title":"Reference Material","text":"<ul> <li> <p>Kubernetes Beginner Tutorial 11 | How to install and use Minikube on Mac OS</p> </li> <li> <p>you need to learn Kubernetes RIGHT NOW!!</p> </li> </ul>"},{"location":"kubernetes/tools/","title":"Useful Tools","text":"<p>AWS Vault - Is a tool to securely store and access AWS credentials in a development environment.  - Homebrew Formulae</p> <pre><code>brew install --cask aws-vault\n</code></pre> <p>k9s - Is a terminal based UI to interact with your Kubernetes clusters - Homebrew Formulae</p> <pre><code>brew install k9s\n</code></pre>"},{"location":"kubernetes/troubleshooting/","title":"Adding some notes ....","text":""},{"location":"linux/commands/","title":"Commands","text":"<ul> <li>Linux Command Tree</li> </ul>"},{"location":"mkdocs/contribute/","title":"Contributing to the Operations Documentation, Served by MkDocs","text":"<p>MkDocs is the static site generator used to build out documentation, the theme being used for this site is Material.</p> <p>The following sections will give you instructions on how to properly make changes to the documentation and get them added to the github pages website. If you have questions or confusion about the documentation, please reach out to the CloudOps team on slack and send a message via <code>@team-cloudops</code>.</p>"},{"location":"mkdocs/contribute/#prerequisites","title":"Prerequisites","text":"<p>Using MkDocs to build your documentation is simple and fun (we love beautiful documentation here), with many team members being able to participate. However, there is a certain level of technical details that contributors need to understand before proceding. Not understanding these prerequisites will cause you to lost time and many headaches down the road. You do not have to be an expert at these concepts to continue, but before continuing forward, please have an understanding of the following:</p> <ul> <li>Git Basics<ul> <li>Learning resource on Git</li> <li>How to clone a repository</li> <li>How to create a branch</li> <li>How to commit changes</li> <li>How to push changes to GitHub</li> <li>How to pull changes in GitHub</li> </ul> </li> <li>MkDocs Basics<ul> <li>How to write documentation in markdown</li> <li>Adding new pages to MkDocs with navigation</li> <li>How to serve MkDocs locally and see your changes</li> </ul> </li> <li>GitHub Basics<ul> <li>How to create a pull request</li> <li>Assigning a Pull Request to a Reviewer</li> </ul> </li> </ul> <p>In addition, you have the ability utilize either the GitHub Desktop or Git CLI to interact with the doucmentation. If you are a beginner at using GitHub or Git, please consider utilizing the GitHub GUI.</p> <ul> <li>Download GitHub Desktop here</li> <li>Download Git CLI here</li> </ul> <p>You will also need access to the 24i/cloudops repository. </p>"},{"location":"mkdocs/markdown/","title":"Markdown Syntax","text":"<ul> <li> <p>Basic writing and formatting syntax</p> </li> <li> <p>Adding Videos</p> </li> <li> <p>Setting links to open in new tabs</p> </li> </ul> <p>To see the example click here.</p>"},{"location":"nginx/commands/","title":"Ningx Commands","text":"<p>cd /etc/nginx/</p> <p>/etc/nginx/sites-enabled/</p>"},{"location":"tools/brew/","title":"Useful Brew Additions","text":""},{"location":"tools/iterm2/","title":"iTerm2","text":""},{"location":"tools/iterm2/#tabs-and-windows","title":"Tabs and Windows","text":"Function Shortcut New Tab <code>\u2318</code> + <code>T</code> Close Tab or Window <code>\u2318</code> + <code>W</code>  (same as many mac apps) Go to Tab <code>\u2318</code> + <code>Number Key</code>  (ie: <code>\u23182</code> is 2nd tab) Go to Split Pane by Direction <code>\u2318</code> + <code>Option</code> + <code>Arrow Key</code> Cycle iTerm Windows <code>\u2318</code> + <code>backtick</code>  (true of all mac apps and works with desktops/mission control) Splitting Split Window Vertically (same profile) <code>\u2318</code> + <code>D</code> Split Window Horizontally (same profile) <code>\u2318</code> + <code>Shift</code> + <code>D</code>  (mnemonic: shift is a wide horizontal key) Moving Move a pane with the mouse <code>\u2318</code> + <code>Alt</code> + <code>Shift</code> and then drag the pane from anywhere Fullscreen Fullscreen <code>\u2318</code>+ <code>Enter</code> Maximize a pane <code>\u2318</code> + <code>Shift</code> + <code>Enter</code>  (use with fullscreen to temp fullscreen a pane!) Resize Pane <code>Ctrl</code> + <code>\u2318</code> + <code>Arrow</code> (given you haven't mapped this to something else) Less Often Used By Me Go to Split Pane by Order of Use <code>\u2318</code> + <code>]</code> , <code>\u2318</code> + <code>[</code> Split Window Horizontally (new profile) <code>Option</code> + <code>\u2318</code> + <code>H</code> Split Window Vertically (new profile) <code>Option</code> + <code>\u2318</code> + <code>V</code> Previous Tab <code>\u2318</code>+ <code>Left Arrow</code>  (I usually move by tab number) Next Tab <code>\u2318</code>+ <code>Right Arrow</code> Go to Window <code>\u2318</code> + <code>Option</code> + <code>Number</code>"},{"location":"tools/iterm2/#my-favorite-shell-key-combos","title":"My Favorite Shell Key Combos","text":"<p>These might be helpful to getting you faster with the shell. These are just common shell shortcuts unrelated to iTerm itelf. These will usually work in Bash/Zsh/Fish on Mac and on Linux. There are many shortcuts out there but I use these quite a bit. There is also more than one way to do a thing so adopt what you like best.</p> <p>Hopefully some of these improve your work life.  :)</p> Function Key Combination Use Delete to start of line <code>Ctrl</code> + <code>U</code> Use this to start over typing without hitting Ctrl-C Delete to end of line <code>Ctrl</code> + <code>K</code> Use this with command history to repeat commands and changing one thing at the end! Repeat last command <code>Up Arrow</code> Cycle and browse your history with up and down.  <code>Ctrl-R</code> is faster if you know the string you are looking for. Move back and forth on a line <code>Arrow Keys</code> This takes you off the home row but it's easy to remember Move back and forth on a line by words <code>\u2325</code> + <code>Arrow Keys</code> Fast way to jump by words to correct a typo or \"run again\" with minor changes to last command.  Ctrl as modifier might also work on mac and non-mac keyboards/shells/apps. Delete previous word (in shell) <code>Ctrl</code> + <code>W</code> It's faster to delete by words.  Especially when your last command was wrong by a single typo or something. Clear screen <code>Ctrl</code> + <code>L</code> This is telling the shell to do it instead of an explicit command like <code>clear</code> or <code>cls</code> in DOS.  If you use <code>\u2318</code> + <code>K</code>, this is telling iTerm to clear the screen which might have the same result or do something terrible (like when using a TUI like <code>top</code> or <code>htop</code>.  In general, use this instead of typing <code>clear</code> over and over. Exit Shell <code>Ctrl</code> + <code>D</code> Instead of typing exit, just get this in muscle memory.  It works in many contexts."},{"location":"tools/iterm2/#moving-faster","title":"Moving Faster","text":"<p>A lot of shell shortcuts work in iterm and it's good to learn these because arrow keys, home/end keys and Mac equivalents don't always work.  For example <code>\u2318</code> + <code>Left Arrow</code> is usually the same as <code>Home</code> (go to beginning of current line) but that doesn't work in the shell.  Home works in many apps but it takes you away from the home row.</p> Function Shortcut Move to the start of line <code>Ctrl</code> + <code>A</code> or <code>Home</code> Move to the end of line <code>Ctrl</code> + <code>E</code> or <code>End</code> Move forward a word <code>Option</code> + <code>F</code> Move backward a word <code>Option</code> + <code>B</code> Set Mark <code>\u2318</code> + <code>M</code> Jump to Mark <code>\u2318</code> + <code>J</code> Moving by word on a line (this is a shell thing but passes through fine) <code>Ctrl</code> + <code>Left/Right Arrow</code> Cursor Jump with Mouse (shell and vim - might depend on config) <code>Option</code> + <code>Left Click</code>"},{"location":"tools/iterm2/#copy-and-paste-with-iterm-without-using-the-mouse","title":"Copy and Paste with iTerm without using the mouse","text":"<p>I don't use this feature too much.  I instead just mouse select (which copies to the clipboard) and paste.  There's no need to Copy to the clipboard if you have <code>General &gt; Selection &gt; Copy to pasteboard on selection</code> enabled.</p> Function Shortcut Enter Copy Mode <code>Shift</code> + <code>\u2318</code> + <code>C</code> Enter Character Selection Mode in Copy Mode <code>Ctrl</code> + <code>V</code> Move cursor in Copy Mode <code>HJKL</code> vim motions or arrow keys Copy text in Copy Mode <code>Ctrl</code> + <code>K</code> <p>Copy actions goes into the normal system clipboard which you can paste like normal.</p>"},{"location":"tools/iterm2/#search-the-command-history","title":"Search the Command History","text":"<p>Some of these are not directly related to iTerm and are just \"shell features\".  Like, if you open Terminal.app on Mac some of these still work because it's the shell and not iTerm.  I'm including them anyway.</p> Function Shortcut Search as you type <code>Ctrl</code> + <code>R</code> and type the search term; Repeat <code>Ctrl</code> + <code>R</code> to loop through result Search the last remembered search term <code>Ctrl</code> + <code>R</code> twice End the search at current history entry <code>Ctrl</code> + <code>Y</code> Cancel the search and restore original line <code>Ctrl</code> + <code>G</code>"},{"location":"tools/iterm2/#misc","title":"Misc","text":"Function Shortcut Clear the screen/pane (when <code>Ctrl + L</code> won't work) <code>\u2318</code> + <code>K</code>  (I use this all the time) Broadcast command to all panes in window (nice when needed!) <code>\u2318</code> + <code>Alt</code> +  <code>I</code> (again to toggle) Find Cursor <code>\u2318</code> + <code>/</code> or use a theme or cursor shape that is easy to see <p>GitHub Source</p> <p>Download iTerm2</p>"},{"location":"videos/video/","title":"Useful Tutorials","text":"<p>Linux System Administration Crash Course</p>"}]}